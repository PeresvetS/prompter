import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as TelegramBot from 'node-telegram-bot-api';
import { UserService } from '../user/user.service';
import { OpenAIService } from '../openai/openai.service';
import { SubscriptionService } from '../subscription/subscription.service';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private bot: TelegramBot;

  constructor(
    private configService: ConfigService,
    private userService: UserService,
    private openaiService: OpenAIService,
    private subscriptionService: SubscriptionService,
  ) {
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');

    if (!token) {
      this.logger.error('TELEGRAM_BOT_TOKEN is not provided');
      return;
    }

    // Initialize bot with polling in development, webhook in production
    const isProduction = this.configService.get('NODE_ENV') === 'production';
    this.bot = new TelegramBot(token, {
      polling: !isProduction, // Use polling in development
      webHook: isProduction, // Use webhook in production
    });

    if (isProduction) {
      this.logger.log('Telegram bot initialized in webhook mode');
    } else {
      this.logger.log(
        'Telegram bot initialized in polling mode for development',
      );
      this.setupPollingHandlers();
    }
  }

  private setupPollingHandlers(): void {
    this.bot.on('message', async (msg) => {
      await this.handleMessage(msg);
    });

    this.bot.on('callback_query', async (query) => {
      await this.handleCallbackQuery(query);
    });

    this.bot.on('polling_error', (error) => {
      this.logger.error('Polling error:', error);
    });

    this.logger.log('Polling message handlers set up');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞ oh_my_zen –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   * @returns –û–±—ä–µ–∫—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–∞–Ω–∞–ª–∞
   */
  private getMainChannelnChannelConfig() {
    return {
      username:
        this.configService.get<string>('CHANNEL_MAIN_USERNAME') || 'oh_my_zen',
      url:
        this.configService.get<string>('CHANNEL_MAIN_URL') ||
        'https://t.me/oh_my_zen',
      emoji: this.configService.get<string>('CHANNEL_MAIN_EMOJI') || 'üì¢',
      text: `${this.configService.get<string>('CHANNEL_MAIN_EMOJI') || 'üì¢'} ${this.configService.get<string>('CHANNEL_MAIN_USERNAME') || 'oh_my_zen'}`,
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞ avato_ai –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   * @returns –û–±—ä–µ–∫—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–∞–Ω–∞–ª–∞
   */
  private getSecondChannelChannelConfig() {
    return {
      username:
        this.configService.get<string>('CHANNEL_SECOND_USERNAME') || 'avato_ai',
      url:
        this.configService.get<string>('CHANNEL_SECOND_URL') ||
        'https://t.me/avato_ai',
      emoji: this.configService.get<string>('CHANNEL_SECOND_EMOJI') || 'üé®',
      text: `${this.configService.get<string>('CHANNEL_SECOND_EMOJI') || 'üé®'} ${this.configService.get<string>('CHANNEL_SECOND_USERNAME') || 'avato_ai'}`,
    };
  }

  async handleUpdate(update: any): Promise<void> {
    try {
      this.logger.debug(`Received update: ${JSON.stringify(update)}`);

      if (update.message) {
        await this.handleMessage(update.message);
      } else if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }
    } catch (error) {
      this.logger.error('Error handling update:', error);
    }
  }

  private async handleMessage(message: any): Promise<void> {
    const { chat, from, text, voice } = message;

    this.logger.log(
      `Message from ${from.username || from.first_name}: ${text || (voice ? '[–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]' : '[–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø]')}`,
    );

    try {
      // Register or update user
      await this.userService.createOrUpdateUser(from);

      // Check if user is banned
      const isBanned = await this.userService.isUserBanned(from.id);
      if (isBanned) {
        await this.sendMessage(
          chat.id,
          'üö´ You have been banned by the administrator.',
        );
        return;
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const { isSubscribed: isInitiallySubscribed } =
        await this.subscriptionService.checkInitialSubscription(from.id);

      if (!isInitiallySubscribed) {
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.sendWelcomeMessageWithButtons(chat.id);
        return;
      }

      // Handle commands and voice messages
      let messageText = text;

      // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ–º –µ–≥–æ
      if (voice) {
        this.logger.debug('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
        try {
          await this.sendChatAction(chat.id, 'typing');
          messageText = await this.transcribeVoiceMessage(voice.file_id);
          this.logger.log(`–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ${messageText}`);
        } catch (error) {
          this.logger.error(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:',
            error,
          );
          await this.sendMessage(
            chat.id,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.',
          );
          return;
        }
      }

      if (messageText === '/start') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —Ä–∞–∑ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const threadId = await this.userService.getOrCreateThreadId(from.id);
        const isFirstTime = !threadId;

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await this.sendSuccessMessage(chat.id, isFirstTime, from.id);
      } else {
        // Check primary channel subscription for regular messages
        const isPrimarySubscribed =
          await this.subscriptionService.checkPrimarySubscription(from.id);

        if (!isPrimarySubscribed) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è
          await this.sendUnsubscribedMessage(chat.id);
          return;
        }
        // Check daily limit
        const { canMakeRequest, requestsUsed } =
          await this.userService.checkDailyLimit(from.id);

        if (!canMakeRequest) {
          await this.sendMessage(
            chat.id,
            `–¢—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∞(–∞), –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üòâ`,
          );
          return;
        }

        // Increment request counter
        await this.userService.incrementDailyRequests(from.id);

        // Show typing action to indicate bot is processing
        await this.sendChatAction(chat.id, 'typing');

        // Process message with OpenAI Assistant
        try {
          // Get or create thread for this user
          let threadId = await this.userService.getOrCreateThreadId(from.id);

          if (!threadId) {
            // Create new thread for user
            threadId = await this.openaiService.createThread();
            if (threadId) {
              await this.userService.saveThreadId(from.id, threadId);
              this.logger.log(
                `Created new thread ${threadId} for user ${from.id}`,
              );
            } else {
              throw new Error('Failed to create OpenAI thread');
            }
          }

          const response = await this.openaiService.processMessage(
            threadId,
            messageText,
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
          const formattedResponse = `<b>–¢–≤–æ–π –ª–∏–º–∏—Ç</b>: ${requestsUsed + 1}/50\n\n<b>–û—Ç–≤–µ—Ç –±–æ—Ç–∞</b>: ${response}`;
          await this.sendMessage(chat.id, formattedResponse, {
            parse_mode: 'HTML',
          });
        } catch (error) {
          this.logger.error('OpenAI Assistant processing failed:', error);

          // Fallback –æ—Ç–≤–µ—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ
          const fallbackResponse = `<b>–¢–≤–æ–π –ª–∏–º–∏—Ç</b>: ${requestsUsed + 1}/50\n<b>–û—Ç–≤–µ—Ç –±–æ—Ç–∞</b>: ${messageText}\n\n‚ö†Ô∏è AI assistant temporarily unavailable`;
          await this.sendMessage(chat.id, fallbackResponse, {
            parse_mode: 'HTML',
          });
        }
      }
    } catch (error) {
      this.logger.error('Error handling message:', error);
      await this.sendMessage(
        chat.id,
        '‚ùå Sorry, something went wrong. Please try again later.',
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
   */
  async sendWelcomeMessageWithButtons(chatId: number): Promise<void> {
    const welcomeText = `–ü—Ä–∏–≤–µ—Ç üëãüèª

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è Veo3 –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ PJ Ace

–°–ø–µ—Ä–≤–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –Ø –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –ø–æ—Ç–æ–º—É —ç—Ç–æ –Ω–∞—à —Å —Ç–æ–±–æ–π —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π –æ–±–º–µ–Ω ü§ù`;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ ENV
    const mainChannelnConfig = this.getMainChannelnChannelConfig();
    const secondChannelConfig = this.getSecondChannelChannelConfig();

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: mainChannelnConfig.text,
            url: mainChannelnConfig.url,
          },
          {
            text: secondChannelConfig.text,
            url: secondChannelConfig.url,
          },
        ],
        [
          {
            text: '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ',
            callback_data: 'check_subscription',
          },
        ],
      ],
    };

    try {
      await this.bot.sendMessage(chatId, welcomeText, {
        reply_markup: keyboard,
      });
      this.logger.debug(`Welcome message with buttons sent to ${chatId}`);
    } catch (error) {
      this.logger.error(`Failed to send welcome message to ${chatId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
   * @param chatId - ID —á–∞—Ç–∞
   * @param isFirstTime - –ü–µ—Ä–≤—ã–π –ª–∏ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
   */
  async sendSuccessMessage(
    chatId: number,
    isFirstTime: boolean = false,
    userId: number,
  ): Promise<void> {
    try {
      const user = await this.userService.getUserByTelegramId(userId);
      if (user.isBanned) {
        await this.sendMessage(
          chatId,
          'üö´ –ú—ã —Å–æ–∂–∞–ª–µ–µ–º, –Ω–æ —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.',
        );
        return;
      }

      if (isFirstTime) {
        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.bot.sendMessage(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç üëãüèª

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è Veo3 –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ PJ Ace`,
        );

        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        await new Promise((resolve) => setTimeout(resolve, 1000));

        // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const mainMessage = `‚ú® –ù–∞–ø–∏—à–∏ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º —Å–≤–æ—é –∏–¥–µ—é, –∏ —è –∑–∞–¥–∞–º —Ç–µ–±–µ –¥–æ 6 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –≤—ã–¥–∞–º –ø—Ä–æ–º–ø—Ç –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ PJ Ace.

üí° –£ —Ç–µ–±—è –µ—Å—Ç—å 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.`;

        await this.bot.sendMessage(chatId, mainMessage);
      } else {
        // –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ /start –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        const mainMessage = `‚ú® –ù–∞–ø–∏—à–∏ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º —Å–≤–æ—é –∏–¥–µ—é, –∏ —è –∑–∞–¥–∞–º —Ç–µ–±–µ –¥–æ 6 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –≤—ã–¥–∞–º –ø—Ä–æ–º–ø—Ç –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ PJ Ace.

üí° –£ —Ç–µ–±—è –µ—Å—Ç—å ${50 - user.dailyRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`;

        await this.bot.sendMessage(chatId, mainMessage);
      }

      this.logger.debug(
        `Success message sent to ${chatId} (first time: ${isFirstTime})`,
      );
    } catch (error) {
      this.logger.error(`Failed to send success message to ${chatId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞
   */
  async sendUnsubscribedMessage(chatId: number): Promise<void> {
    const unsubscribedText = `–ü–æ—Ö–æ–∂–µ, —Ç—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ üôèüèª`;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞ –∏–∑ ENV
    const mainChannelnConfig = this.getMainChannelnChannelConfig();

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: `${mainChannelnConfig.emoji} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${mainChannelnConfig.username}`,
            url: mainChannelnConfig.url,
          },
        ],
      ],
    };

    try {
      await this.bot.sendMessage(chatId, unsubscribedText, {
        reply_markup: keyboard,
      });
      this.logger.debug(`Unsubscribed message sent to ${chatId}`);
    } catch (error) {
      this.logger.error(
        `Failed to send unsubscribed message to ${chatId}:`,
        error,
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ"
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
   * @param chatId - ID —á–∞—Ç–∞
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async sendSubscriptionSuccessMessage(
    chatId: number,
    userId: number,
  ): Promise<void> {
    try {
      const user = await this.userService.getUserByTelegramId(userId);
      if (user.isBanned) {
        await this.sendMessage(
          chatId,
          'üö´ –ú—ã —Å–æ–∂–∞–ª–µ–µ–º, –Ω–æ —Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.',
        );
        return;
      }
      await this.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! ‚úÖ');
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      const mainMessage = `‚ú® –ù–∞–ø–∏—à–∏ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º —Å–≤–æ—é –∏–¥–µ—é, –∏ —è –∑–∞–¥–∞–º —Ç–µ–±–µ –¥–æ 6 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –≤—ã–¥–∞–º –ø—Ä–æ–º–ø—Ç –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ PJ Ace.

üí° –£ —Ç–µ–±—è –µ—Å—Ç—å ${50 - user.dailyRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`;

      await this.bot.sendMessage(chatId, mainMessage);

      this.logger.debug(
        `Subscription success message sent to ${chatId} (from button)`,
      );
    } catch (error) {
      this.logger.error(
        `Failed to send subscription success message to ${chatId}:`,
        error,
      );
    }
  }

  async sendMessage(
    chatId: number,
    text: string,
    options?: any,
  ): Promise<void> {
    try {
      await this.bot.sendMessage(chatId, text, options);
      this.logger.debug(`Message sent to ${chatId}: ${text}`);
    } catch (error) {
      this.logger.error(`Failed to send message to ${chatId}:`, error);
    }
  }

  async sendChatAction(chatId: number, action: any): Promise<void> {
    try {
      await this.bot.sendChatAction(chatId, action);
      this.logger.debug(`Chat action sent to ${chatId}: ${action}`);
    } catch (error) {
      this.logger.error(`Failed to send chat action to ${chatId}:`, error);
    }
  }

  async setWebhook(url: string): Promise<boolean> {
    try {
      const result = await this.bot.setWebHook(url);
      this.logger.log(`Webhook set to: ${url}`);
      return result;
    } catch (error) {
      this.logger.error('Failed to set webhook:', error);
      return false;
    }
  }

  async getWebhookInfo(): Promise<any> {
    try {
      return await this.bot.getWebHookInfo();
    } catch (error) {
      this.logger.error('Failed to get webhook info:', error);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
   * @param query - –û–±—ä–µ–∫—Ç callback_query –æ—Ç Telegram
   */
  private async handleCallbackQuery(query: any): Promise<void> {
    const { id, data, from, message } = query;

    this.logger.log(
      `Callback query from ${from.username || from.first_name}: ${data}`,
    );

    try {
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "loading" —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await this.bot.answerCallbackQuery(id);

      if (data === 'check_subscription') {
        await this.handleSubscriptionCheck(from, message.chat.id);
      }
    } catch (error) {
      this.logger.error('Error handling callback query:', error);
      // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      try {
        await this.bot.answerCallbackQuery(id, {
          text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          show_alert: true,
        });
      } catch (answerError) {
        this.logger.error('Error answering callback query:', answerError);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ"
   * @param from - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param chatId - ID —á–∞—Ç–∞
   */
  private async handleSubscriptionCheck(
    from: any,
    chatId: number,
  ): Promise<void> {
    try {
      // Register or update user first
      await this.userService.createOrUpdateUser(from);

      // Check if user is banned
      const isBanned = await this.userService.isUserBanned(from.id);
      if (isBanned) {
        await this.sendMessage(
          chatId,
          'üö´ You have been banned by the administrator.',
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      const { isSubscribed } =
        await this.subscriptionService.checkInitialSubscription(from.id);

      if (isSubscribed) {
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è" –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.sendSubscriptionSuccessMessage(chatId, from.id);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await this.sendSubscriptionErrorMessage(chatId);
      }
    } catch (error) {
      this.logger.error('Error in handleSubscriptionCheck:', error);
      await this.sendMessage(
        chatId,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
   * @param chatId - ID —á–∞—Ç–∞
   */
  private async sendSubscriptionErrorMessage(chatId: number): Promise<void> {
    const errorText = `–ò–∑–≤–∏–Ω–∏, –Ω–æ –ø–æ—Ö–æ–∂–µ —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.`;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ ENV
    const mainChannelnConfig = this.getMainChannelnChannelConfig();
    const secondChannelConfig = this.getSecondChannelChannelConfig();

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: mainChannelnConfig.text,
            url: mainChannelnConfig.url,
          },
          {
            text: secondChannelConfig.text,
            url: secondChannelConfig.url,
          },
        ],
        [
          {
            text: '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ',
            callback_data: 'check_subscription',
          },
        ],
      ],
    };

    try {
      await this.bot.sendMessage(chatId, errorText, {
        reply_markup: keyboard,
      });
      this.logger.debug(`Subscription error message sent to ${chatId}`);
    } catch (error) {
      this.logger.error(
        `Failed to send subscription error message to ${chatId}:`,
        error,
      );
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram —Å –ø–æ–º–æ—â—å—é Whisper API
   * @param fileId - ID —Ñ–∞–π–ª–∞ –≤ Telegram
   * @returns –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  private async transcribeVoiceMessage(fileId: string): Promise<string> {
    try {
      this.logger.debug(`–°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${fileId}`);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const fileInfo = await this.bot.getFile(fileId);
      const filePath = fileInfo.file_path;

      if (!filePath) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
      }

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±—É—Ñ–µ—Ä
      const fileBuffer = await this.bot.downloadFile(fileId, './');

      if (!fileBuffer || !Buffer.isBuffer(fileBuffer)) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
      const fileName = `voice_${fileId}.ogg`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI Whisper –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
      const transcription = await this.openaiService.transcribeAudio(
        fileBuffer,
        fileName,
      );

      if (!transcription || transcription.trim().length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–∏');
      }

      return transcription.trim();
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }
}
