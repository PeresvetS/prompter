# Product Requirements Document: Assistant Gate Bot

## 1. Обзор продукта

**Видение продукта:** Создать Telegram-бота, который предоставляет пользователям доступ к возможностям OpenAI Assistant, одновременно стимулируя рост подписчиков для заданных Telegram-каналов через механизм обязательной подписки.

**Целевые пользователи:**

- **Основные:** Владельцы Telegram-каналов, желающие увеличить свою аудиторию, предоставляя ценный сервис (доступ к ИИ).
- **Вторичные:** Обычные пользователи Telegram, которые ищут бесплатный и удобный доступ к продвинутому ИИ-помощнику.

**Бизнес-цели:**

- Увеличение количества подписчиков на целевых каналах.
- Обеспечение стабильной и полезной услуги для удержания пользователей.
- Создание простой системы для администрирования и контроля над пользователями.

**Метрики успеха:**

- Количество новых подписчиков на целевых каналах в день/неделю.
- Количество активных пользователей бота в день (DAU).
- Среднее количество запросов на одного активного пользователя в день.
- Процент успешно обработанных запросов.

## 2. Требования к функциям

| Функция                                     | Описание                                                                                                                                             | Пользовательские истории                                                                                                    | Приоритет     | Критерии приёмки                                                                                                                                                                                                                                                                                      | Зависимости                                        |
| ------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- | ------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------- |
| **Начальная проверка подписки (`/start`)**  | При первом запуске бот проверяет подписку пользователя на 1 или 2 канала (настраивается через ENV). Доступ не предоставляется до выполнения условия. | Как новый пользователь, я хочу начать работу с ботом, и я понимаю, что для этого мне нужно подписаться на указанные каналы. | **Must-have** | - Бот корректно определяет количество каналов для проверки из `.env`.<br>- Бот правильно проверяет статус подписки.<br>- Если пользователь не подписан, бот отправляет сообщение со ссылками и не даёт доступ.<br>- После подписки бот приветствует пользователя и открывает функционал.              | Telegram API (права админа в каналах для проверки) |
| **Основное взаимодействие с ИИ**            | Пользователь отправляет текстовый запрос боту, бот передаёт его в OpenAI Assistant API и возвращает ответ.                                           | Как пользователь, я хочу отправить текстовый запрос и получить релевантный ответ от ИИ.                                     | **Must-have** | - Запросы успешно отправляются в OpenAI.<br>- Ответы корректно принимаются и пересылаются пользователю.<br>- Поддерживается история диалога в рамках одной сессии OpenAI Assistant.                                                                                                                   | OpenAI Assistant API, Webhooks                     |
| **Проверка подписки перед каждым запросом** | Перед обработкой каждого запроса к ИИ система проверяет, подписан ли пользователь на ОДИН основной канал.                                            | Как владелец канала, я хочу быть уверен, что только мои подписчики могут постоянно использовать бота.                       | **Must-have** | - Перед каждым запросом к OpenAI выполняется проверка подписки на основной канал.<br>- Если пользователь отписался, бот отправляет напоминание с просьбой подписаться и не обрабатывает запрос.                                                                                                       | Telegram API                                       |
| **Дневной лимит запросов**                  | Каждый пользователь может отправить не более 50 запросов в сутки. Счётчик сбрасывается ежедневно.                                                    | Как администратор, я хочу ограничить использование API, чтобы контролировать расходы.                                       | **Must-have** | - Система ведёт учёт запросов для каждого пользователя.<br>- При достижении лимита (50 запросов) бот информирует пользователя и блокирует дальнейшие запросы до следующего дня.<br>- Счётчик автоматически сбрасывается в 00:00 по UTC.                                                               | База данных (Prisma)                               |
| **Сохранение данных пользователя**          | При первом контакте бот сохраняет всю доступную информацию о пользователе из Telegram (ID, username, first_name, last_name и т.д.) в базу данных.    | Как администратор, я хочу видеть, кто использует моего бота.                                                                | **Must-have** | - В таблице `User` в БД создаётся запись с данными пользователя.<br>- Данные обновляются при последующих взаимодействиях, если они изменились.                                                                                                                                                        | Telegram API, Prisma                               |
| **Панель администратора (Admin Panel)**     | Простой веб-интерфейс на Vite для управления ботом.                                                                                                  | Как администратор, я хочу иметь удобный интерфейс для мониторинга и управления пользователями.                              | **Must-have** | - Отображается общее количество зарегистрированных пользователей.<br>- Есть таблица со списком всех пользователей (имя, username).<br>- Для каждого пользователя видно, сколько запросов из дневного лимита он потратил сегодня.<br>- Есть кнопка "Забанить/Разбанить" напротив каждого пользователя. | Vite, API бэкенда                                  |
| **Функция бана пользователя**               | Администратор может заблокировать пользователю доступ к боту через админ-панель.                                                                     | Как администратор, я хочу иметь возможность заблокировать пользователя, который нарушает правила.                           | **Must-have** | - В админ-панели кнопка "Забанить" меняет флаг `is_banned` в БД для пользователя.<br>- Забаненный пользователь при попытке отправить запрос получает сообщение о блокировке.                                                                                                                          | API бэкенда, Prisma                                |

## 3. Пользовательские потоки (User Flows)

### Поток 1: Регистрация нового пользователя

1.  Пользователь находит бота и нажимает `/start`.
2.  Система проверяет ENV-переменные `INITIAL_CHANNEL_IDS` (например, `id1,id2`) и определяет, что нужно проверить подписку на 2 канала.
3.  Система через Telegram API проверяет статус подписки пользователя.
4.  **Альтернативный путь (не подписан):**
    - Бот отправляет сообщение: "Для начала работы, пожалуйста, подпишитесь на наши каналы: [Канал 1](link) и [Канал 2](link). Как только сделаете это, нажмите /start снова."
5.  **Основной путь (подписан):**
    - Система сохраняет данные пользователя в БД (включая `initial_channels_required = 2`).
    - Бот отправляет приветственное сообщение: "Добро пожаловать! Вы можете задать мне до 50 вопросов в день. Чем могу помочь?"

### Поток 2: Отправка запроса к ИИ

1.  Пользователь отправляет текстовое сообщение.
2.  Система проверяет, не забанен ли пользователь (`is_banned == true`).
    - **Ошибка:** Если забанен, бот отвечает: "Вы были заблокированы администратором." и прекращает обработку.
3.  Система проверяет дневной лимит запросов (`daily_requests < 50`).
    - **Ошибка:** Если лимит исчерпан, бот отвечает: "Вы исчерпали свой дневной лимит в 50 запросов. Возвращайтесь завтра!" и прекращает обработку.
4.  Система проверяет подписку на основной канал (указанный в `PRIMARY_CHANNEL_ID`).
    - **Ошибка:** Если не подписан, бот отвечает: "Кажется, вы отписались. Чтобы продолжить, пожалуйста, подпишитесь на [Основной Канал](link) и попробуйте снова."
5.  **Основной путь:**
    - Система увеличивает счётчик `daily_requests` на 1.
    - Запрос передаётся в OpenAI Assistant API через вебхук.
    - Пока OpenAI обрабатывает запрос, бот может показать статус "Печатает...".
    - Ответ от OpenAI поступает на вебхук бэкенда и пересылается пользователю в Telegram.

## 4. Нефункциональные требования

### Производительность

- **Время ответа:** Ответ на проверку подписки и лимитов должен быть практически мгновенным (< 200ms). Общее время ответа зависит от OpenAI.
- **Вебхуки:** Использование вебхуков для Telegram и OpenAI обязательно для асинхронной обработки и предотвращения тайм-аутов.

### Безопасность

- Все ключи API (Telegram Bot Token, OpenAI API Key) и ID каналов должны храниться исключительно в переменных окружения (`.env`) и не должны быть в коде.
- Админ-панель должна быть защищена (минимум — логин/пароль, также хранящиеся в `.env`).
- Следует придерживаться рекомендаций из **"Full Stack Security Guide for Vibe Coders 🛡️"**.

### Масштабируемость

- Архитектура должна позволять в будущем легко добавлять новые каналы для проверки или вводить платные тарифы с увеличенными лимитами.

## 5. Технические спецификации

### Бэкенд

- **Язык/Фреймворк:** **TypeScript + NestJS**. NestJS выбран за его модульную архитектуру, встроенную поддержку TypeScript и DI (Dependency Injection), что идеально подходит для структурирования логики (модули `Telegram`, `OpenAI`, `User`, `Admin`).
- **База данных:** **PostgreSQL** с **Prisma ORM** для строгой типизации и удобной работы с БД.
- **API для админки:** REST API, созданный с помощью NestJS.

### Фронтенд (Админ-панель)

- **Технологии:** **Vite + React** (или Vue/Svelte на выбор команды) для быстрой разработки простого и реактивного интерфейса.

### Инфраструктура

- **Хостинг:** Любой VPS или облачный сервис (например, DigitalOcean, Vercel, Railway), способный запустить Node.js приложение и принимать вебхуки.
- **CI/CD:** Настройка GitHub Actions для автоматической сборки и развертывания приложения при пуше в `main`.
- **Контейнеризация:** Использование Docker и Docker Compose для унификации окружения разработки и продакшена.

## 6. План релизов

### MVP (v1.0)

- **Функции:** Все функции, перечисленные в разделе "Требования к функциям".
- **Сроки:** [Указать предполагаемую дату]
- **Критерии успеха MVP:** Бот работает стабильно, проверки подписок и лимитов функционируют корректно, админ-панель отображает данные и позволяет банить пользователей.

### Будущие релизы (v1.1+)

- Введение платных подписок для снятия лимитов.
- Более детальная аналитика в админ-панели (графики, популярные запросы).
- Возможность для администратора рассылать сообщения всем пользователям бота.
- Поддержка разных моделей OpenAI.

## 7. Открытые вопросы и допущения

- **Вопрос:** Как бот должен реагировать на запросы, не являющиеся текстом (картинки, стикеры, файлы)?
  - _Предложение:_ На MVP-этапе игнорировать или отвечать "Я работаю только с текстом".
- **Вопрос:** Что делать, если OpenAI API недоступен или возвращает ошибку?
  - _Предложение:_ Информировать пользователя о временных технических проблемах и не засчитывать попытку в лимит.
- **Допущение:** У бота будут права администратора в целевых каналах, чтобы иметь возможность проверять список подписчиков. **Это критически важное требование.**
- **Допущение:** OpenAI Assistant уже настроен (сконфигурирован с нужными инструкциями, файлами или инструментами, если это необходимо).
